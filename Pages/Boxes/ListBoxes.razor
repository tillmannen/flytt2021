@page "/boxes/list"
@attribute [Authorize]


@using flytt2021.Data.Services
@using flytt2021.Data.Entities
@using flytt2021.Data.Database

@inject MovingboxService MovingboxService
@inject UserService UserService

<h1>Flyttkartonger</h1>

@if (movingboxes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
        <input class="form-control form-control-lg" @bind-value="SearchText" 
               @bind-value:event="oninput" placeholder="Sök i lådorna" />
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Nummer</th>
                <th>Märkning/Utseende</th>
                <th>Innehåll</th>
                <th>Destination</th>
                <th>Våning</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var box in filteredMovingboxes)
            {
                <tr>
                    <td><a href="/boxes/add/@box.MovingboxId">@box.MovingboxId</a></td>
                    <td>@box.Marking</td>
                    <td>@box.Contents</td>
                    <td>@box.Destination</td>
                    <td>@box.DestinationFloor?.Name</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }

    public string SearchText = "";

    private IEnumerable<Movingbox> movingboxes;
    private IEnumerable<Movingbox> filteredMovingboxes => movingboxes.Where(mb => mb.Contents.ToLower().Contains(SearchText.ToLower()));
    

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthStat).User;
        movingboxes = await MovingboxService.GetMovingboxesAsync(user.Identity.Name);
    }

}
