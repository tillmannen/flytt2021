@page "/boxes/list"
@attribute [Authorize]


@using flytt2021.Data.Services
@using flytt2021.Data.Entities
@using flytt2021.Data.Database

@inject MovingboxService MovingboxService
@inject UserService UserService
@inject NavigationManager NavigationManager

<h1>Flyttkartonger</h1>

@if (movingboxes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
        <input class="form-control form-control-lg" @bind-value="SearchText" @bind-value:event="oninput" placeholder="Sök i lådorna" /><br />
    </div>
    <div class="accordion" id="accordionExample">
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingOne">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
                    Filter
                </button>
            </h2>
            <div id="collapseOne" class="accordion-collapse collapse" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" @bind="@onlyPrioritized" />
                        <label class="form-check-label">Visa endast de som ska packas upp först</label>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <table class="table">
        <thead>
            <tr>
                <th>Nummer</th>
                <th>Märkning/Utseende</th>
                <th>Innehåll</th>
                <th>Destination</th>
                <th>Våning</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var box in filteredMovingboxes)
            {
                <tr>
                    <td><a href="/boxes/edit/@box.MovingboxId">@box.Number</a></td>
                    <td>@box.Marking</td>
                    <td>@box.Contents</td>
                    <td>@box.Destination</td>
                    <td>@box.DestinationFloor?.Name</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }

    public string SearchText = "";

    private bool onlyPrioritized = false;
    private IEnumerable<Movingbox> movingboxes;
    private IEnumerable<Movingbox> filteredMovingboxes =>
        movingboxes
        .Where(mb => mb.Contents.ToLower().Contains(SearchText.ToLower()))
        .Where(mb => !onlyPrioritized || mb.PrioritizedUnpacking == true);


    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthStat).User;
        var flyttUser = UserService.GetUser(user.Identity.Name);
        if (flyttUser.MoveId == null)
            NavigationManager.NavigateTo("/");
        movingboxes = await MovingboxService.GetMovingboxesAsync(user.Identity.Name);
    }

}
