@page "/boxes/add"
@page "/boxes/edit/{Id:int}"
@attribute [Authorize]

@using flytt2021.Data.Services
@using flytt2021.Data.Entities
@using flytt2021.Pages.Boxes.Components

@inject MovingboxService MovingboxService
@inject MoveService MoveService
@inject UserService UserService
@inject NavigationManager NavigationManager

<h1>Flyttkartong</h1>

@if (existingMovingboxes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm EditContext="editContext" OnValidSubmit="SaveBox">
        <DataAnnotationsValidator />
        <ValidationSummary />

        @if(Id != null && DateTime.Now.Date >= move.MoveDate)
        {
            
            <button type="button" class="btn btn-primary" @onclick="ToggleUnpacked">
                @if(newBox.IsUnpacked){
                    <span>Markera som ouppackad</span>
                }else{
                    <span>Markera som uppackad</span>
                }
                
            </button>
            <br/>         
            <br/>
            @if(!string.IsNullOrEmpty(hideContents)){
                <button type="button" class="btn btn-secondary" @onclick="ShowContents">Visa innehållet i lådan</button>
            }

        }

        <div id="contents" class="row @hideContents">
            <div class="col-md-8">
                @if(Id == null)
                {
                    <div class="mb-3">
                        <input type="checkbox" id="AutoNumbering" class="form-check-input" @bind="@AutoNumbering" />
                        <label for="AutoNumbering" class="form-check-label">
                            Numrera automatiskt
                        </label>
                    </div>
                    @if (!AutoNumbering)
                    {
                    <div class="mb-3">
                        <label for="Number" class="control-label">Nummer</label>
                        <input class="form-control form-control-sm" type="number" step="any"
                               @bind-value:event="onchange" @oninput="NumberChanged" @bind-value="WishedNumber" />
                        @if (BoxExists)
                        {
                        <span>En låda har redan nummer @WishedNumber. Välj ett annat. Om du inte väljer ett annat kommer lådan att få nästa möjliga nummer automatiskt.</span>
                        }
                    </div>
                    }
                }
                <div class="mb-3">
                    <label for="Contents" class="control-label">Innehåll</label>
                    <textarea form="Contents" class="form-control" style="height:200px" @bind="@newBox.Contents"></textarea>
                </div>
                <div class="mb-3">
                    <label for="Marking" class="control-label">Lådans utseende</label>
                    <input form="Marking" class="form-control" @bind="@newBox.Marking" />
                </div>
                <div class="mb-3">
                    <label for="Destination" class="control-label">Destination</label>
                    <input form="Destination" class="form-control" @bind="@newBox.Destination" />
                </div>

                @if (destinationFloors.Any())
                {
                    <div class="mb-3">
                        <label for="floor" class="control-label">Våning</label>
                        <select form="floor" @bind="@newBox.DestinationFloorId" class="form-control">
                            @if (destinationFloors != null)
                            {
                                @foreach (var floor in destinationFloors)
                                {
                                    <option value="@floor.DestinationFloorId">@floor.Name</option>
                                }
                            }
                        </select>
                    </div>
                }
                @if (boxOwners.Any())
                {
                    <div class="mb-3">
                        <label for="floor" class="control-label">Ägare av lådan</label>
                        <select form="floor" @bind="@newBox.BoxOwnerId" class="form-control">
                            @if (boxOwners != null)
                            {
                                @foreach (var owner in boxOwners)
                                {
                                    <option value="@owner.Id" selected=@owner.IsDefault>@owner.Name</option>
                                }
                            }
                        </select>
                    </div>
                }
                @if (packers.Any())
                {
                    <div class="mb-3">
                        <label for="floor" class="control-label">Packare</label>
                        <select form="floor" @bind="@newBox.PackerId" class="form-control">
                            @if (packers != null)
                            {
                                @foreach (var packer in packers)
                                {
                                    <option value="@packer.Id">@packer.Name</option>
                                }
                            }
                        </select>
                    </div>
                }

                <div class="mb-3">
                    <input type="checkbox" form="Prioritized" class="form-check-input" @bind="@newBox.PrioritizedUnpacking" />
                    <label for="Prioritized" class="form-check-label">
                        Packas upp först
                    </label>
                </div>

                <button type="submit" class="btn btn-primary">Spara</button>
                <button type="button" class="btn btn-primary" @onclick="@Cancel">Rensa formuläret</button>
            </div>
        </div>
    </EditForm>
    <br />
    <br />
}

@code {
    [Parameter]
    public int? Id { get; set; }

    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }

    private Move move;
    private IEnumerable<Movingbox> existingMovingboxes;
    private IEnumerable<BoxOwner> boxOwners;
    private IEnumerable<Packer> packers;
    private IEnumerable<DestinationFloor> destinationFloors;
    private Movingbox newBox = new Movingbox();

    private bool AutoNumbering = true;
    private int WishedNumber = 0;
    private bool BoxExists = false;

    EditContext editContext;

    string hideContents = "";

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthStat).User;
        var userid = user.Identity.Name;

        var flyttUser = UserService.GetUser(user.Identity.Name);
        if (!flyttUser.MoveId.HasValue)
            NavigationManager.NavigateTo("/");

        move = MoveService.GetMove(flyttUser.MoveId.Value);

        existingMovingboxes = await MovingboxService.GetMovingboxesAsync(userid);
        packers = MoveService.GetPackers(userid);
        boxOwners = MoveService.GetBoxOwners(userid);
        destinationFloors = MoveService.GetDestinationFloors(userid);
        var userName = user.Identity.Name;

        if (Id != null)
        {
            newBox = existingMovingboxes.FirstOrDefault(b => b.MovingboxId == Id);
            if (newBox == null)
                NavigationManager.NavigateTo("/");
        }
        else
        {
            newBox.MoveId = flyttUser.MoveId.Value;
            newBox.Number = 0;
            newBox.DestinationFloorId = destinationFloors.FirstOrDefault()?.DestinationFloorId;
            newBox.PackerId = packers.FirstOrDefault(p => userName.ToLower().Contains(p.Name.ToLower()))?.Id;
            newBox.BoxOwnerId = boxOwners.FirstOrDefault()?.Id;
        }

        if(Id != null && DateTime.Now.Date >= move.MoveDate)
            hideContents = "d-none";

        editContext = new EditContext(newBox);
    }

    protected async void SaveBox()
    {
        var messageStore = new ValidationMessageStore(editContext);
        //if (newBox.PackerId == null)
        //{
        //    messageStore.Add(editContext.Field("Packer"), "Välj en packare");
        //    editContext.NotifyValidationStateChanged();
        //}
        //if (newBox.BoxOwnerId == null)
        //{
        //    messageStore.Add(editContext.Field("BoxOwner"), "Välj en lådägare");
        //    editContext.NotifyValidationStateChanged();
        //}
        //if (newBox.DestinationFloorId == null)
        //{
        //    messageStore.Add(editContext.Field("DestinationFloor"), "Välj en våning");
        //    editContext.NotifyValidationStateChanged();
        //}
        if (!editContext.Validate()) return;
        if (!AutoNumbering && !BoxExists)
            newBox.Number = WishedNumber;

        var newid = await MovingboxService.SaveMovingboxAsync(newBox);

        if(newBox.IsUnpacked)
            NavigationManager.NavigateTo("/boxes/list");

        else if (newid > 0)
            NavigationManager.NavigateTo("/boxes/added/" + newid);
    }
    protected void NumberChanged(ChangeEventArgs e)
    {
        try
        {
            _ = int.TryParse(e.Value.ToString(), out var number);
            WishedNumber = number;
            BoxExists = existingMovingboxes.Any(mb => mb.Number == number);
        }
        catch
        {
            BoxExists = false;
        }

    }
    protected void ResetValidation(ChangeEventArgs e)
    {
        editContext = new EditContext(newBox);
    }
    protected void Cancel()
    {
        newBox = new Movingbox();
    }

    private void ShowContents()
    {
        hideContents = "";
    }
    private void ToggleUnpacked()
    {
        newBox.IsUnpacked = !newBox.IsUnpacked;
        SaveBox();
    }
}
