@page "/boxes/add"
@page "/boxes/add/{Id:int}"
@attribute [Authorize]

@using flytt2021.Data.Services
@using flytt2021.Data.Entities
@using flytt2021.Pages.Boxes.Components

@inject MovingboxService MovingboxService
@inject NavigationManager NavigationManager

<h1>Flyttkartong</h1>

@if (existingMovingboxes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm EditContext="editContext" OnValidSubmit="SaveBox">  
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row">
            <div class="col-md-8">
                <div class="form-group">
                    <label for="Contents" class="control-label">Innehåll</label>
                    <textarea form="Contents" class="form-control" style="height:200px" @bind="@newBox.Contents"></textarea>
                </div>
                <div class="form-group">
                    <label for="Marking" class="control-label">Lådans utseende</label>
                    <input form="Marking" class="form-control" @bind="@newBox.Marking" />
                </div>
                <div class="form-group">
                    <label for="Destination" class="control-label">Destination</label>
                    <input form="Destination" class="form-control" @bind="@newBox.Destination" />
                </div>

                @*<div class="form-group">
                    <label for="floor" class="control-label">Våning</label>
                    <select form="floor" @bind="@newBox.DestinationFloorEnum" class="form-control">
                        <option value="Upper">Övervåning</option>
                        <option value="Middle">Mellanplanet</option>
                        <option value="Basement">Källare</option>
                    </select>
                </div>*@
                <DestinationFloorSelectList @bind-Item="@selectedDestinationFloor" OnItemChange="ResetValidation"></DestinationFloorSelectList>
                <BoxOwnerSelectList @bind-Item="@selectedBoxOwnerName" OnItemChange="ResetValidation"></BoxOwnerSelectList>
                <PackerSelectList @bind-Item="@selectedPackerName" OnItemChange="ResetValidation"></PackerSelectList>

            </div>
        </div>

        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    <input type="submit" class="btn btn-primary" value="Spara" />
                    <input type="button" class="btn btn-primary" @onclick="@Cancel" value="Rensa formuläret" />
                </div>
            </div>
        </div>

    </EditForm>

}

@code {
    [Parameter]
    public int? Id { get; set; }

    private IEnumerable<Movingbox> existingMovingboxes;
    private IEnumerable<BoxOwner> boxOwners;
    private IEnumerable<Packer> packers;
    private IEnumerable<DestinationFloor> destinationFloors;
    private Movingbox newBox = new Movingbox();
    public string selectedBoxOwnerName = "";
    private string selectedPackerName = "";
    private string selectedDestinationFloor = "";

    EditContext editContext;

    protected override async Task OnInitializedAsync()
    {
        existingMovingboxes = await MovingboxService.GetMovingboxesAsync();
        if (Id != null)
        {
            newBox = existingMovingboxes.FirstOrDefault(b => b.MovingboxId == Id);
            selectedBoxOwnerName = newBox.BoxOwner?.Name;
            selectedPackerName = newBox.Packer?.Name;
            selectedDestinationFloor = newBox.DestinationFloor?.Name;
        }
        packers = MovingboxService.GetPackers();
        boxOwners = MovingboxService.GetBoxOwners();
        destinationFloors = MovingboxService.GetDestinationFloors();

        editContext = new EditContext(newBox);
    }

    protected async void SaveBox()
    {
        var messageStore = new ValidationMessageStore(editContext);
        if (selectedPackerName == "")
        {
            messageStore.Add(editContext.Field("Packer"), "Välj en packare");
            editContext.NotifyValidationStateChanged();
        }
        if (selectedBoxOwnerName == "")
        {
            messageStore.Add(editContext.Field("BoxOwner"), "Välj en lådägare");
            editContext.NotifyValidationStateChanged();
        }
        if (selectedDestinationFloor == "")
        {
            messageStore.Add(editContext.Field("DestinationFloor"), "Välj en våning");
            editContext.NotifyValidationStateChanged();
        }
        if (!editContext.Validate()) return;

        newBox.Packer = packers.FirstOrDefault(p => p.Name == selectedPackerName);
        newBox.BoxOwner = boxOwners.FirstOrDefault(bo => bo.Name == selectedBoxOwnerName);
        newBox.DestinationFloor = destinationFloors.FirstOrDefault(df => df.Name == selectedDestinationFloor);

        newBox.MoveId = 1;
        var newid = await MovingboxService.SaveMovingboxAsync(newBox);

        if (newid > 0)
            NavigationManager.NavigateTo("/boxes/added/" + newid);
    }
    protected void ResetValidation()
    {
        editContext = new EditContext(newBox);
    }
    protected void Cancel()
    {
        newBox = new Movingbox();
    }
}
