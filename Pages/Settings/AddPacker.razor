@page "/packers/add"
@page "/packers/add/{IsGuide:int}"
@attribute [Authorize]

@using flytt2021.Data.Services
@using flytt2021.Data.Entities
@using flytt2021.Data.Database

@inject NavigationManager NavigationManager
@inject MoveService MoveService
@inject UserService UserService

<h3>Ny packare</h3>

<p>
    Om ni är flera som packar kan det vara en bra idé att skriva upp vem som packat lådorna. Då vet man vem man ska fråga om det är någonting man undrar om.
    @if (move.Packers?.Count() < 1)
    {
        <span>Om du inte vet alla packare ännu så kan du enkelt lägga till flera efteråt.</span>
    }
</p>
@if (move.Packers?.Count() > 0)
{
    <h4>Dina nuvarande packare:</h4>
    <ul>
        @foreach (var packer in move.Packers)
        {
            <li>@packer.Name</li>
        }
    </ul>
}
<EditForm Model="@packer" OnValidSubmit="@SaveNewPacker">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-floating mb-3">
        <InputText id="name" class="form-control" @bind-Value="@packer.Name" placeholder="Namn"></InputText>
        <label for="name">Namn:</label>
        <ValidationMessage For="@(() => packer.Name)" />
    </div>
    <button type="submit" class="btn btn-primary">Lägg till packare</button>
</EditForm>
<br />


@if (IsGuide > 0)
{
    <div class="btn-group">
        <button class="btn btn-secondary" @onclick="Prev">Tillbaka</button>
        <button class="btn btn-secondary" @onclick="Done">Klar</button>
        <button class="btn btn-primary" @onclick="Next">Nästa</button>
    </div>
}
else
{

    <button class="btn btn-success" @onclick="Done">Klar</button>
}


@code {
    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }

    [Parameter]
    public int IsGuide { get; set; } = 0;

    private Packer packer;
    private Move move;

    private FlyttUser currentUser;

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthStat).User;
        var userid = user.Identity.Name;

        currentUser = UserService.GetUser(userid);

        if (!currentUser.MoveId.HasValue)
        {
            NavigationManager.NavigateTo("/move/add");
        }

        packer = new Packer() { MoveId = currentUser.MoveId.Value };
        move = MoveService.GetMove(currentUser.MoveId.Value);
    }

    private async void SaveNewPacker()
    {
        var newpacker = await MoveService.AddPackerAsync(packer);
        if (newpacker != null)
            move.Packers.Add(newpacker);

        packer = new Packer() { MoveId = currentUser.MoveId.Value };
    }

    private void Prev()
    {
        NavigationManager.NavigateTo("/destinationfloors/add/1");
    }
    private void Done()
    {
        NavigationManager.NavigateTo("/settings");
    }
    private void Next()
    {
        NavigationManager.NavigateTo("/boxowners/add/1");
    }
}
